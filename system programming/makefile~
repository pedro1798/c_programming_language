# Simple Makefile with use of gcc
CC=gcc # C Compiler 
CFLAGS=-g -Wall # Debug information 추가, Warning을 전부 표시 

SRC_DIR=src
OBJ_DIR=build
BIN_DIR=bin

EXEC=$(BIN_DIR)/c_study # 최종 결과물 출력하는 rule
SOURCES=$(wildcard $(SRC_DIR)/*.c)
# $(wildcard ...) : 해당 디렉토리의 모든 파일 가져오기
OBJECTS=$(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, %(SOURCES))

# 기본 빌드
all: $(EXEC)

# 최종 실행 파일 생성
$(EXEC): $(OBJECTS) # 등록한 모든 오브젝트 파일을 디펜던시로 받는다.
	@mkdir -p $(BIN_DIR)  # 디렉토리가 없다면 생성
	$(CC) $^ -o $@ # 모든 디펜던시를 $(EXEC) 이름의 실행 파일로 생성

# %는 패턴 규칙에서 자리를 지정하는 와일드 카드
# $*는 그 %에 실제로 들어온 값을 의미한다. 

# 특정 오브젝트 파일과 실행 파일 삭제
clean-%:
	rm -rf $*.o $*

# 실행 파일 생성
%: %.o  
	$(CC) $< -o $@

# $<: 첫 번쨰 디펜던시, $@: 타겟(rule, 만들고자 하는 결과물) 

# 오브젝트 파일 생성
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(OBJ_DIR)
	$(CC) $(CFLAGS) -c $<
